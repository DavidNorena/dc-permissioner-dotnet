trigger:
  batch: true
  branches:
    include:
      - main
      - release/*

variables:
  buildConfiguration: 'Release'

stages:
- stage: BuildPublish
  jobs:
  - job: BuildPublish
    pool:
      vmImage: 'ubuntu-latest'
      demands:
        - npm
    steps:
    - script: ./scripts/release-version.sh
      name: CalcVersion
      displayName: 'Calculate Next Version'
      failOnStderr: true
      env: 
        GIT_CREDENTIALS: $(System.AccessToken)
    - task: UseDotNet@2
      displayName: 'Install .NET Core SDK'
      inputs:
        version: 8.x
        performMultiLevelLookup: true
    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration) /p:Version=$(CalcVersion.NEXT_VERSION) /p:AssemblyVersion=$(CalcVersion.ASSEMBLY_VERSION)'
        versioningScheme: byBuildNumber
    - task: DotNetCoreCLI@2
      displayName: 'dotnet pack'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        command: pack
        packagesToPack: '**/*Domain.csproj;**/*Permissioneer.csproj;**/*EntityFramework.csproj'
        nobuild: true
        versioningScheme: byEnvVar
        versionEnvVar: CalcVersion.NEXT_VERSION
    - task: DotNetCoreCLI@2
      displayName: 'dotnet nuget push'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        command: 'push'
        packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: 'b9e2d67a-05b8-49aa-b1d0-8468c16e95ae/6e0dc4c1-91e8-4f84-8c1d-c33460fc7247'
