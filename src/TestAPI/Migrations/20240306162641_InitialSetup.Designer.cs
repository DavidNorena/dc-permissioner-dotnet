// <auto-generated />
using System;
using Dabitco.Permissioneer.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dabitco.Permissioneer.TestAPI.Migrations
{
    [DbContext(typeof(PermissioneerDbContext))]
    [Migration("20240306162641_InitialSetup")]
    partial class InitialSetup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("permissioneer")
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Dabitco.Permissioneer.Domain.Entities.ApiKeyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HashedKey")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("ApiKey", "permissioneer");
                });

            modelBuilder.Entity("Dabitco.Permissioneer.Domain.Entities.ApiKeyPermissionEntity", b =>
                {
                    b.Property<Guid>("ApiKeyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApiKeyId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("ApiKeyPermission", "permissioneer");
                });

            modelBuilder.Entity("Dabitco.Permissioneer.Domain.Entities.PermissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsAssignable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Permission", "permissioneer");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2d82c53-f6be-4095-8a98-bd62c12842b4"),
                            Description = "Read API Keys",
                            IsAssignable = true,
                            Name = "read:api-keys"
                        },
                        new
                        {
                            Id = new Guid("f2d82c53-f6be-4095-8a98-bd62c12842b5"),
                            Description = "Create or Update API Keys",
                            IsAssignable = true,
                            Name = "write:api-keys"
                        },
                        new
                        {
                            Id = new Guid("f2d82c53-f6be-4095-8a98-bd62c12842b6"),
                            Description = "Revoke API Keys",
                            IsAssignable = true,
                            Name = "revoke:api-keys"
                        },
                        new
                        {
                            Id = new Guid("f2d82c53-f6be-4095-8a98-bd62c12842c4"),
                            Description = "Read Roles",
                            IsAssignable = true,
                            Name = "read:roles"
                        },
                        new
                        {
                            Id = new Guid("f2d82c53-f6be-4095-8a98-bd62c12842c5"),
                            Description = "Create or Update Roles",
                            IsAssignable = true,
                            Name = "write:roles"
                        },
                        new
                        {
                            Id = new Guid("f2d82c53-f6be-4095-8a98-bd62c12842c6"),
                            Description = "Delete Roles",
                            IsAssignable = true,
                            Name = "delete:roles"
                        },
                        new
                        {
                            Id = new Guid("f2d82c53-f6be-4095-8a98-bd62c12842c7"),
                            Description = "Read Permissions",
                            IsAssignable = true,
                            Name = "read:permissions"
                        },
                        new
                        {
                            Id = new Guid("f2d82c53-f6be-4095-8a98-bd62c12842c0"),
                            Description = "Assign Permissions",
                            IsAssignable = true,
                            Name = "assign:permissions"
                        },
                        new
                        {
                            Id = new Guid("f2d82c53-f6be-4095-8a98-bd62c12842c1"),
                            Description = "Unassign Permissions",
                            IsAssignable = true,
                            Name = "unassign:permissions"
                        },
                        new
                        {
                            Id = new Guid("f9ec9c70-3c35-4b6d-b82a-5bbd4b43e4a3"),
                            Description = "Read Quotes",
                            IsAssignable = true,
                            Name = "read:quotes"
                        },
                        new
                        {
                            Id = new Guid("05adbf0d-1b79-4777-93de-28474e9ba19e"),
                            Description = "Create or Update Quotes",
                            IsAssignable = true,
                            Name = "write:quotes"
                        },
                        new
                        {
                            Id = new Guid("cdfd4277-e7a7-4813-9058-e109fc6a7d0c"),
                            Description = "Delete Quotes",
                            IsAssignable = true,
                            Name = "delete:quotes"
                        },
                        new
                        {
                            Id = new Guid("d1027891-8a12-41d2-9a0d-d7b1a077a664"),
                            Description = "Manage All Resources",
                            IsAssignable = false,
                            Name = "manage:all-resources"
                        });
                });

            modelBuilder.Entity("Dabitco.Permissioneer.Domain.Entities.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Role", "permissioneer");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2d82c53-f6be-4095-8a98-bd62c12842c4"),
                            Description = "Admin Role",
                            IsActive = true,
                            IsSystem = true,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("1a307ea6-fbe1-4048-a447-af7057faa5c5"),
                            Description = "User Role",
                            IsActive = true,
                            IsSystem = true,
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("5c5f7695-17f7-4963-8114-526b2f024faa"),
                            Description = "Guest Role",
                            IsActive = true,
                            IsSystem = true,
                            Name = "Guest"
                        });
                });

            modelBuilder.Entity("Dabitco.Permissioneer.Domain.Entities.RolePermissionEntity", b =>
                {
                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit");

                    b.HasKey("PermissionId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission", "permissioneer");

                    b.HasData(
                        new
                        {
                            PermissionId = new Guid("f9ec9c70-3c35-4b6d-b82a-5bbd4b43e4a3"),
                            RoleId = new Guid("f2d82c53-f6be-4095-8a98-bd62c12842c4"),
                            IsAllowed = true,
                            IsSystem = true
                        },
                        new
                        {
                            PermissionId = new Guid("05adbf0d-1b79-4777-93de-28474e9ba19e"),
                            RoleId = new Guid("f2d82c53-f6be-4095-8a98-bd62c12842c4"),
                            IsAllowed = true,
                            IsSystem = true
                        },
                        new
                        {
                            PermissionId = new Guid("cdfd4277-e7a7-4813-9058-e109fc6a7d0c"),
                            RoleId = new Guid("f2d82c53-f6be-4095-8a98-bd62c12842c4"),
                            IsAllowed = true,
                            IsSystem = true
                        },
                        new
                        {
                            PermissionId = new Guid("f9ec9c70-3c35-4b6d-b82a-5bbd4b43e4a3"),
                            RoleId = new Guid("1a307ea6-fbe1-4048-a447-af7057faa5c5"),
                            IsAllowed = true,
                            IsSystem = true
                        },
                        new
                        {
                            PermissionId = new Guid("05adbf0d-1b79-4777-93de-28474e9ba19e"),
                            RoleId = new Guid("1a307ea6-fbe1-4048-a447-af7057faa5c5"),
                            IsAllowed = true,
                            IsSystem = true
                        },
                        new
                        {
                            PermissionId = new Guid("f9ec9c70-3c35-4b6d-b82a-5bbd4b43e4a3"),
                            RoleId = new Guid("5c5f7695-17f7-4963-8114-526b2f024faa"),
                            IsAllowed = true,
                            IsSystem = true
                        },
                        new
                        {
                            PermissionId = new Guid("05adbf0d-1b79-4777-93de-28474e9ba19e"),
                            RoleId = new Guid("5c5f7695-17f7-4963-8114-526b2f024faa"),
                            IsAllowed = false,
                            IsSystem = true
                        },
                        new
                        {
                            PermissionId = new Guid("cdfd4277-e7a7-4813-9058-e109fc6a7d0c"),
                            RoleId = new Guid("5c5f7695-17f7-4963-8114-526b2f024faa"),
                            IsAllowed = false,
                            IsSystem = true
                        });
                });

            modelBuilder.Entity("Dabitco.Permissioneer.Domain.Entities.ApiKeyPermissionEntity", b =>
                {
                    b.HasOne("Dabitco.Permissioneer.Domain.Entities.ApiKeyEntity", "ApiKey")
                        .WithMany("ApiKeyPermissions")
                        .HasForeignKey("ApiKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dabitco.Permissioneer.Domain.Entities.PermissionEntity", "Permission")
                        .WithMany("ApiKeyPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiKey");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Dabitco.Permissioneer.Domain.Entities.RolePermissionEntity", b =>
                {
                    b.HasOne("Dabitco.Permissioneer.Domain.Entities.PermissionEntity", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dabitco.Permissioneer.Domain.Entities.RoleEntity", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Dabitco.Permissioneer.Domain.Entities.ApiKeyEntity", b =>
                {
                    b.Navigation("ApiKeyPermissions");
                });

            modelBuilder.Entity("Dabitco.Permissioneer.Domain.Entities.PermissionEntity", b =>
                {
                    b.Navigation("ApiKeyPermissions");

                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Dabitco.Permissioneer.Domain.Entities.RoleEntity", b =>
                {
                    b.Navigation("RolePermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
